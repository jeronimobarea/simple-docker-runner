// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jeronimobarea/simple-docker-runner/internal/docker (interfaces: DockerRunner)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	docker "github.com/jeronimobarea/simple-docker-runner/internal/docker"
)

// MockDockerRunner is a mock of DockerRunner interface.
type MockDockerRunner struct {
	ctrl     *gomock.Controller
	recorder *MockDockerRunnerMockRecorder
}

// MockDockerRunnerMockRecorder is the mock recorder for MockDockerRunner.
type MockDockerRunnerMockRecorder struct {
	mock *MockDockerRunner
}

// NewMockDockerRunner creates a new mock instance.
func NewMockDockerRunner(ctrl *gomock.Controller) *MockDockerRunner {
	mock := &MockDockerRunner{ctrl: ctrl}
	mock.recorder = &MockDockerRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerRunner) EXPECT() *MockDockerRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockDockerRunner) Run(arg0 context.Context, arg1 docker.RunCMD) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockDockerRunnerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDockerRunner)(nil).Run), arg0, arg1)
}
